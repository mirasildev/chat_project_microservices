// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: group_chat_service.proto

package group_chat_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GroupChatServiceClient is the client API for GroupChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupChatServiceClient interface {
	AddMember(ctx context.Context, in *AddMemberGroupRequest, opts ...grpc.CallOption) (*AddMemberGroupResponse, error)
	RemoveMember(ctx context.Context, in *RemoveMemberGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupChatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LeaveGroup(ctx context.Context, in *LeaveGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAllJoinedGroup(ctx context.Context, in *GetAllJoinedGroupRequest, opts ...grpc.CallOption) (*GetAllJoinedGroupsResponse, error)
}

type groupChatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupChatServiceClient(cc grpc.ClientConnInterface) GroupChatServiceClient {
	return &groupChatServiceClient{cc}
}

func (c *groupChatServiceClient) AddMember(ctx context.Context, in *AddMemberGroupRequest, opts ...grpc.CallOption) (*AddMemberGroupResponse, error) {
	out := new(AddMemberGroupResponse)
	err := c.cc.Invoke(ctx, "/genproto.GroupChatService/AddMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupChatServiceClient) RemoveMember(ctx context.Context, in *RemoveMemberGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/genproto.GroupChatService/RemoveMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupChatServiceClient) DeleteGroup(ctx context.Context, in *DeleteGroupChatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/genproto.GroupChatService/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupChatServiceClient) LeaveGroup(ctx context.Context, in *LeaveGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/genproto.GroupChatService/LeaveGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupChatServiceClient) GetAllJoinedGroup(ctx context.Context, in *GetAllJoinedGroupRequest, opts ...grpc.CallOption) (*GetAllJoinedGroupsResponse, error) {
	out := new(GetAllJoinedGroupsResponse)
	err := c.cc.Invoke(ctx, "/genproto.GroupChatService/GetAllJoinedGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupChatServiceServer is the server API for GroupChatService service.
// All implementations must embed UnimplementedGroupChatServiceServer
// for forward compatibility
type GroupChatServiceServer interface {
	AddMember(context.Context, *AddMemberGroupRequest) (*AddMemberGroupResponse, error)
	RemoveMember(context.Context, *RemoveMemberGroupRequest) (*emptypb.Empty, error)
	DeleteGroup(context.Context, *DeleteGroupChatRequest) (*emptypb.Empty, error)
	LeaveGroup(context.Context, *LeaveGroupRequest) (*emptypb.Empty, error)
	GetAllJoinedGroup(context.Context, *GetAllJoinedGroupRequest) (*GetAllJoinedGroupsResponse, error)
	mustEmbedUnimplementedGroupChatServiceServer()
}

// UnimplementedGroupChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGroupChatServiceServer struct {
}

func (UnimplementedGroupChatServiceServer) AddMember(context.Context, *AddMemberGroupRequest) (*AddMemberGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMember not implemented")
}
func (UnimplementedGroupChatServiceServer) RemoveMember(context.Context, *RemoveMemberGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMember not implemented")
}
func (UnimplementedGroupChatServiceServer) DeleteGroup(context.Context, *DeleteGroupChatRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedGroupChatServiceServer) LeaveGroup(context.Context, *LeaveGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGroup not implemented")
}
func (UnimplementedGroupChatServiceServer) GetAllJoinedGroup(context.Context, *GetAllJoinedGroupRequest) (*GetAllJoinedGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllJoinedGroup not implemented")
}
func (UnimplementedGroupChatServiceServer) mustEmbedUnimplementedGroupChatServiceServer() {}

// UnsafeGroupChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupChatServiceServer will
// result in compilation errors.
type UnsafeGroupChatServiceServer interface {
	mustEmbedUnimplementedGroupChatServiceServer()
}

func RegisterGroupChatServiceServer(s grpc.ServiceRegistrar, srv GroupChatServiceServer) {
	s.RegisterService(&GroupChatService_ServiceDesc, srv)
}

func _GroupChatService_AddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChatServiceServer).AddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.GroupChatService/AddMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChatServiceServer).AddMember(ctx, req.(*AddMemberGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupChatService_RemoveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMemberGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChatServiceServer).RemoveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.GroupChatService/RemoveMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChatServiceServer).RemoveMember(ctx, req.(*RemoveMemberGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupChatService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChatServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.GroupChatService/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChatServiceServer).DeleteGroup(ctx, req.(*DeleteGroupChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupChatService_LeaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChatServiceServer).LeaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.GroupChatService/LeaveGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChatServiceServer).LeaveGroup(ctx, req.(*LeaveGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupChatService_GetAllJoinedGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllJoinedGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChatServiceServer).GetAllJoinedGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.GroupChatService/GetAllJoinedGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChatServiceServer).GetAllJoinedGroup(ctx, req.(*GetAllJoinedGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupChatService_ServiceDesc is the grpc.ServiceDesc for GroupChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "genproto.GroupChatService",
	HandlerType: (*GroupChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMember",
			Handler:    _GroupChatService_AddMember_Handler,
		},
		{
			MethodName: "RemoveMember",
			Handler:    _GroupChatService_RemoveMember_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _GroupChatService_DeleteGroup_Handler,
		},
		{
			MethodName: "LeaveGroup",
			Handler:    _GroupChatService_LeaveGroup_Handler,
		},
		{
			MethodName: "GetAllJoinedGroup",
			Handler:    _GroupChatService_GetAllJoinedGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "group_chat_service.proto",
}
